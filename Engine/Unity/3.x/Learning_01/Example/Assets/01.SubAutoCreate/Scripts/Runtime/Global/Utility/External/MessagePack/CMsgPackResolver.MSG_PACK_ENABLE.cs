#if MSG_PACK_ENABLE
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(44)
            {
                { typeof(global::System.Collections.Generic.Dictionary<global::EItemKinds, int>), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<int, float>), 1 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::CCellInfo>), 2 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>), 3 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CCellInfo>>), 4 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>>), 5 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>>>), 6 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, int>>), 7 },
                { typeof(global::System.Collections.Generic.Dictionary<int, int>), 8 },
                { typeof(global::System.Collections.Generic.Dictionary<int, string>), 9 },
                { typeof(global::System.Collections.Generic.Dictionary<long, float>), 10 },
                { typeof(global::System.Collections.Generic.Dictionary<long, global::CClearInfo>), 11 },
                { typeof(global::System.Collections.Generic.Dictionary<long, int>), 12 },
                { typeof(global::System.Collections.Generic.Dictionary<long, string>), 13 },
                { typeof(global::System.Collections.Generic.Dictionary<string, float>), 14 },
                { typeof(global::System.Collections.Generic.Dictionary<string, int>), 15 },
                { typeof(global::System.Collections.Generic.Dictionary<string, string>), 16 },
                { typeof(global::System.Collections.Generic.List<float>), 17 },
                { typeof(global::System.Collections.Generic.List<global::EMissionKinds>), 18 },
                { typeof(global::System.Collections.Generic.List<global::ETutorialKinds>), 19 },
                { typeof(global::System.Collections.Generic.List<global::SampleEngineName.EBlockKinds>), 20 },
                { typeof(global::System.Collections.Generic.List<int>), 21 },
                { typeof(global::System.Collections.Generic.List<long>), 22 },
                { typeof(global::System.Collections.Generic.List<string>), 23 },
                { typeof(global::EItemKinds), 24 },
                { typeof(global::EMissionKinds), 25 },
                { typeof(global::ETutorialKinds), 26 },
                { typeof(global::SampleEngineName.EBlockKinds), 27 },
                { typeof(global::CBaseInfo), 28 },
                { typeof(global::CCommonBaseInfo), 29 },
                { typeof(global::CAppInfo), 30 },
                { typeof(global::CCellInfo), 31 },
                { typeof(global::CClearInfo), 32 },
                { typeof(global::CCommonAppInfo), 33 },
                { typeof(global::CCommonGameInfo), 34 },
                { typeof(global::CCommonUserInfo), 35 },
                { typeof(global::CGameInfo), 36 },
                { typeof(global::CLevelInfo), 37 },
                { typeof(global::CUserInfo), 38 },
                { typeof(global::SampleEngineName.STEngineTypeWrapper), 39 },
                { typeof(global::STCommonTypeWrapper), 40 },
                { typeof(global::STIDInfo), 41 },
                { typeof(global::STIdxInfo), 42 },
                { typeof(global::STTypeWrapper), 43 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<global::EItemKinds, int>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<int, float>();
                case 2: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::CCellInfo>();
                case 3: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::CLevelInfo>();
                case 4: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::System.Collections.Generic.Dictionary<int, global::CCellInfo>>();
                case 5: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>>();
                case 6: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>>>();
                case 7: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::System.Collections.Generic.Dictionary<int, int>>();
                case 8: return new global::MessagePack.Formatters.DictionaryFormatter<int, int>();
                case 9: return new global::MessagePack.Formatters.DictionaryFormatter<int, string>();
                case 10: return new global::MessagePack.Formatters.DictionaryFormatter<long, float>();
                case 11: return new global::MessagePack.Formatters.DictionaryFormatter<long, global::CClearInfo>();
                case 12: return new global::MessagePack.Formatters.DictionaryFormatter<long, int>();
                case 13: return new global::MessagePack.Formatters.DictionaryFormatter<long, string>();
                case 14: return new global::MessagePack.Formatters.DictionaryFormatter<string, float>();
                case 15: return new global::MessagePack.Formatters.DictionaryFormatter<string, int>();
                case 16: return new global::MessagePack.Formatters.DictionaryFormatter<string, string>();
                case 17: return new global::MessagePack.Formatters.ListFormatter<float>();
                case 18: return new global::MessagePack.Formatters.ListFormatter<global::EMissionKinds>();
                case 19: return new global::MessagePack.Formatters.ListFormatter<global::ETutorialKinds>();
                case 20: return new global::MessagePack.Formatters.ListFormatter<global::SampleEngineName.EBlockKinds>();
                case 21: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 22: return new global::MessagePack.Formatters.ListFormatter<long>();
                case 23: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 24: return new MessagePack.Formatters.EItemKindsFormatter();
                case 25: return new MessagePack.Formatters.EMissionKindsFormatter();
                case 26: return new MessagePack.Formatters.ETutorialKindsFormatter();
                case 27: return new MessagePack.Formatters.SampleEngineName.EBlockKindsFormatter();
                case 28: return new MessagePack.Formatters.CBaseInfoFormatter();
                case 29: return new MessagePack.Formatters.CCommonBaseInfoFormatter();
                case 30: return new MessagePack.Formatters.CAppInfoFormatter();
                case 31: return new MessagePack.Formatters.CCellInfoFormatter();
                case 32: return new MessagePack.Formatters.CClearInfoFormatter();
                case 33: return new MessagePack.Formatters.CCommonAppInfoFormatter();
                case 34: return new MessagePack.Formatters.CCommonGameInfoFormatter();
                case 35: return new MessagePack.Formatters.CCommonUserInfoFormatter();
                case 36: return new MessagePack.Formatters.CGameInfoFormatter();
                case 37: return new MessagePack.Formatters.CLevelInfoFormatter();
                case 38: return new MessagePack.Formatters.CUserInfoFormatter();
                case 39: return new MessagePack.Formatters.SampleEngineName.STEngineTypeWrapperFormatter();
                case 40: return new MessagePack.Formatters.STCommonTypeWrapperFormatter();
                case 41: return new MessagePack.Formatters.STIDInfoFormatter();
                case 42: return new MessagePack.Formatters.STIdxInfoFormatter();
                case 43: return new MessagePack.Formatters.STTypeWrapperFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class EItemKindsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EItemKinds>
    {
        public void Serialize(ref MessagePackWriter writer, global::EItemKinds value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::EItemKinds Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::EItemKinds)reader.ReadInt32();
        }
    }

    public sealed class EMissionKindsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EMissionKinds>
    {
        public void Serialize(ref MessagePackWriter writer, global::EMissionKinds value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::EMissionKinds Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::EMissionKinds)reader.ReadInt32();
        }
    }

    public sealed class ETutorialKindsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ETutorialKinds>
    {
        public void Serialize(ref MessagePackWriter writer, global::ETutorialKinds value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::ETutorialKinds Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::ETutorialKinds)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.SampleEngineName
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class EBlockKindsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SampleEngineName.EBlockKinds>
    {
        public void Serialize(ref MessagePackWriter writer, global::SampleEngineName.EBlockKinds value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::SampleEngineName.EBlockKinds Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::SampleEngineName.EBlockKinds)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class CBaseInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CBaseInfo>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public CBaseInfoFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(6, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::CAppInfo).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::CUserInfo).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::CGameInfo).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::CClearInfo).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::CCellInfo).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::CLevelInfo).TypeHandle, new KeyValuePair<int, int>(5, 5) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(6)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::CBaseInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::CAppInfo>().Serialize(ref writer, (global::CAppInfo)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::CUserInfo>().Serialize(ref writer, (global::CUserInfo)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::CGameInfo>().Serialize(ref writer, (global::CGameInfo)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::CClearInfo>().Serialize(ref writer, (global::CClearInfo)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::CCellInfo>().Serialize(ref writer, (global::CCellInfo)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::CLevelInfo>().Serialize(ref writer, (global::CLevelInfo)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::CBaseInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::CBaseInfo");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::CBaseInfo result = null;
            switch (key)
            {
                case 0:
                    result = (global::CBaseInfo)options.Resolver.GetFormatterWithVerify<global::CAppInfo>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::CBaseInfo)options.Resolver.GetFormatterWithVerify<global::CUserInfo>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::CBaseInfo)options.Resolver.GetFormatterWithVerify<global::CGameInfo>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::CBaseInfo)options.Resolver.GetFormatterWithVerify<global::CClearInfo>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::CBaseInfo)options.Resolver.GetFormatterWithVerify<global::CCellInfo>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::CBaseInfo)options.Resolver.GetFormatterWithVerify<global::CLevelInfo>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class CCommonBaseInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CCommonBaseInfo>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public CCommonBaseInfoFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(3, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::CCommonAppInfo).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::CCommonUserInfo).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::CCommonGameInfo).TypeHandle, new KeyValuePair<int, int>(2, 2) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(3)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::CCommonBaseInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::CCommonAppInfo>().Serialize(ref writer, (global::CCommonAppInfo)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::CCommonUserInfo>().Serialize(ref writer, (global::CCommonUserInfo)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::CCommonGameInfo>().Serialize(ref writer, (global::CCommonGameInfo)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::CCommonBaseInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::CCommonBaseInfo");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::CCommonBaseInfo result = null;
            switch (key)
            {
                case 0:
                    result = (global::CCommonBaseInfo)options.Resolver.GetFormatterWithVerify<global::CCommonAppInfo>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::CCommonBaseInfo)options.Resolver.GetFormatterWithVerify<global::CCommonUserInfo>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::CCommonBaseInfo)options.Resolver.GetFormatterWithVerify<global::CCommonGameInfo>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class CAppInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CAppInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CAppInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
        }

        public global::CAppInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CAppInfo();
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CCellInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CCellInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CCellInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(62);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
            formatterResolver.GetFormatterWithVerify<global::STIdxInfo>().Serialize(ref writer, value.m_stIdxInfo, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::SampleEngineName.EBlockKinds>>().Serialize(ref writer, value.m_oBlockKindsList, options);
        }

        public global::CCellInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_stIdxInfo__ = default(global::STIdxInfo);
            var __m_oBlockKindsList__ = default(global::System.Collections.Generic.List<global::SampleEngineName.EBlockKinds>);
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __m_stIdxInfo__ = formatterResolver.GetFormatterWithVerify<global::STIdxInfo>().Deserialize(ref reader, options);
                        break;
                    case 61:
                        __m_oBlockKindsList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::SampleEngineName.EBlockKinds>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CCellInfo();
            ____result.m_stIdxInfo = __m_stIdxInfo__;
            ____result.m_oBlockKindsList = __m_oBlockKindsList__;
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CClearInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CClearInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CClearInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
            formatterResolver.GetFormatterWithVerify<global::STIDInfo>().Serialize(ref writer, value.m_stIDInfo, options);
        }

        public global::CClearInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_stIDInfo__ = default(global::STIDInfo);
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __m_stIDInfo__ = formatterResolver.GetFormatterWithVerify<global::STIDInfo>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CClearInfo();
            ____result.m_stIDInfo = __m_stIDInfo__;
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CCommonAppInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CCommonAppInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CCommonAppInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
        }

        public global::CCommonAppInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CCommonAppInfo();
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CCommonGameInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CCommonGameInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CCommonGameInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            ((IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize();
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
        }

        public global::CCommonGameInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CCommonGameInfo();
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ((IMessagePackSerializationCallbackReceiver)____result).OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CCommonUserInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CCommonUserInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CCommonUserInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(82);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.m_oRestoreProductIDList, options);
        }

        public global::CCommonUserInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oRestoreProductIDList__ = default(global::System.Collections.Generic.List<string>);
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 81:
                        __m_oRestoreProductIDList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CCommonUserInfo();
            ____result.m_oRestoreProductIDList = __m_oRestoreProductIDList__;
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CGameInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CGameInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CGameInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(152);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::EMissionKinds>>().Serialize(ref writer, value.m_oCompleteMissionKindsList, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::EMissionKinds>>().Serialize(ref writer, value.m_oCompleteDailyMissionKindsList, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ETutorialKinds>>().Serialize(ref writer, value.m_oCompleteTutorialKindsList, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, global::CClearInfo>>().Serialize(ref writer, value.m_oClearInfoDict, options);
        }

        public global::CGameInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oCompleteMissionKindsList__ = default(global::System.Collections.Generic.List<global::EMissionKinds>);
            var __m_oCompleteDailyMissionKindsList__ = default(global::System.Collections.Generic.List<global::EMissionKinds>);
            var __m_oCompleteTutorialKindsList__ = default(global::System.Collections.Generic.List<global::ETutorialKinds>);
            var __m_oClearInfoDict__ = default(global::System.Collections.Generic.Dictionary<long, global::CClearInfo>);
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 61:
                        __m_oCompleteMissionKindsList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::EMissionKinds>>().Deserialize(ref reader, options);
                        break;
                    case 62:
                        __m_oCompleteDailyMissionKindsList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::EMissionKinds>>().Deserialize(ref reader, options);
                        break;
                    case 63:
                        __m_oCompleteTutorialKindsList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ETutorialKinds>>().Deserialize(ref reader, options);
                        break;
                    case 151:
                        __m_oClearInfoDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, global::CClearInfo>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CGameInfo();
            ____result.m_oCompleteMissionKindsList = __m_oCompleteMissionKindsList__;
            ____result.m_oCompleteDailyMissionKindsList = __m_oCompleteDailyMissionKindsList__;
            ____result.m_oCompleteTutorialKindsList = __m_oCompleteTutorialKindsList__;
            ____result.m_oClearInfoDict = __m_oClearInfoDict__;
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CLevelInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CLevelInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CLevelInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(162);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
            formatterResolver.GetFormatterWithVerify<global::STIDInfo>().Serialize(ref writer, value.m_stIDInfo, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CCellInfo>>>().Serialize(ref writer, value.m_oCellInfoDictContainer, options);
        }

        public global::CLevelInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_stIDInfo__ = default(global::STIDInfo);
            var __m_oCellInfoDictContainer__ = default(global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CCellInfo>>);
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 3:
                        __m_stIDInfo__ = formatterResolver.GetFormatterWithVerify<global::STIDInfo>().Deserialize(ref reader, options);
                        break;
                    case 161:
                        __m_oCellInfoDictContainer__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CCellInfo>>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CLevelInfo();
            ____result.m_stIDInfo = __m_stIDInfo__;
            ____result.m_oCellInfoDictContainer = __m_oCellInfoDictContainer__;
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CUserInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CUserInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::CUserInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(112);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrDict, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::EItemKinds, int>>().Serialize(ref writer, value.m_oNumItemsDict, options);
        }

        public global::CUserInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oNumItemsDict__ = default(global::System.Collections.Generic.Dictionary<global::EItemKinds, int>);
            var __m_oIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 111:
                        __m_oNumItemsDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::EItemKinds, int>>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __m_oIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CUserInfo();
            ____result.m_oNumItemsDict = __m_oNumItemsDict__;
            ____result.m_oIntDict = __m_oIntDict__;
            ____result.m_oFltDict = __m_oFltDict__;
            ____result.m_oStrDict = __m_oStrDict__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class STCommonTypeWrapperFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::STCommonTypeWrapper>
    {

        public void Serialize(ref MessagePackWriter writer, global::STCommonTypeWrapper value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(33);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.m_oIntList, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<float>>().Serialize(ref writer, value.m_oFltList, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.m_oStrList, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>().Serialize(ref writer, value.m_oIntIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, float>>().Serialize(ref writer, value.m_oIntFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, string>>().Serialize(ref writer, value.m_oIntStrDict, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, int>>().Serialize(ref writer, value.m_oLongIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, float>>().Serialize(ref writer, value.m_oLongFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, string>>().Serialize(ref writer, value.m_oLongStrDict, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Serialize(ref writer, value.m_oStrIntDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Serialize(ref writer, value.m_oStrFltDict, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Serialize(ref writer, value.m_oStrStrDict, options);
        }

        public global::STCommonTypeWrapper Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oIntList__ = default(global::System.Collections.Generic.List<int>);
            var __m_oFltList__ = default(global::System.Collections.Generic.List<float>);
            var __m_oStrList__ = default(global::System.Collections.Generic.List<string>);
            var __m_oIntIntDict__ = default(global::System.Collections.Generic.Dictionary<int, int>);
            var __m_oIntFltDict__ = default(global::System.Collections.Generic.Dictionary<int, float>);
            var __m_oIntStrDict__ = default(global::System.Collections.Generic.Dictionary<int, string>);
            var __m_oLongIntDict__ = default(global::System.Collections.Generic.Dictionary<long, int>);
            var __m_oLongFltDict__ = default(global::System.Collections.Generic.Dictionary<long, float>);
            var __m_oLongStrDict__ = default(global::System.Collections.Generic.Dictionary<long, string>);
            var __m_oStrIntDict__ = default(global::System.Collections.Generic.Dictionary<string, int>);
            var __m_oStrFltDict__ = default(global::System.Collections.Generic.Dictionary<string, float>);
            var __m_oStrStrDict__ = default(global::System.Collections.Generic.Dictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __m_oIntList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __m_oFltList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<float>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __m_oStrList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __m_oIntIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __m_oIntFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, float>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __m_oIntStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, string>>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        __m_oLongIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, int>>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        __m_oLongFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, float>>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        __m_oLongStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, string>>().Deserialize(ref reader, options);
                        break;
                    case 30:
                        __m_oStrIntDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>().Deserialize(ref reader, options);
                        break;
                    case 31:
                        __m_oStrFltDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>().Deserialize(ref reader, options);
                        break;
                    case 32:
                        __m_oStrStrDict__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::STCommonTypeWrapper();
            ____result.m_oIntList = __m_oIntList__;
            ____result.m_oFltList = __m_oFltList__;
            ____result.m_oStrList = __m_oStrList__;
            ____result.m_oIntIntDict = __m_oIntIntDict__;
            ____result.m_oIntFltDict = __m_oIntFltDict__;
            ____result.m_oIntStrDict = __m_oIntStrDict__;
            ____result.m_oLongIntDict = __m_oLongIntDict__;
            ____result.m_oLongFltDict = __m_oLongFltDict__;
            ____result.m_oLongStrDict = __m_oLongStrDict__;
            ____result.m_oStrIntDict = __m_oStrIntDict__;
            ____result.m_oStrFltDict = __m_oStrFltDict__;
            ____result.m_oStrStrDict = __m_oStrStrDict__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class STIDInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::STIDInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::STIDInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(3);
            writer.Write(value.m_nID);
            writer.Write(value.m_nStageID);
            writer.Write(value.m_nChapterID);
        }

        public global::STIDInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __m_nID__ = default(int);
            var __m_nStageID__ = default(int);
            var __m_nChapterID__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __m_nID__ = reader.ReadInt32();
                        break;
                    case 1:
                        __m_nStageID__ = reader.ReadInt32();
                        break;
                    case 2:
                        __m_nChapterID__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::STIDInfo();
            ____result.m_nID = __m_nID__;
            ____result.m_nStageID = __m_nStageID__;
            ____result.m_nChapterID = __m_nChapterID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class STIdxInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::STIdxInfo>
    {

        public void Serialize(ref MessagePackWriter writer, global::STIdxInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(3);
            writer.Write(value.m_nX);
            writer.Write(value.m_nY);
            writer.Write(value.m_nZ);
        }

        public global::STIdxInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __m_nX__ = default(int);
            var __m_nY__ = default(int);
            var __m_nZ__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __m_nX__ = reader.ReadInt32();
                        break;
                    case 1:
                        __m_nY__ = reader.ReadInt32();
                        break;
                    case 2:
                        __m_nZ__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::STIdxInfo();
            ____result.m_nX = __m_nX__;
            ____result.m_nY = __m_nY__;
            ____result.m_nZ = __m_nZ__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class STTypeWrapperFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::STTypeWrapper>
    {

        public void Serialize(ref MessagePackWriter writer, global::STTypeWrapper value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(163);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<long>>().Serialize(ref writer, value.m_oLevelIDList, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, int>>>().Serialize(ref writer, value.m_oNumLevelInfosDictContainer, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>>>>().Serialize(ref writer, value.m_oLevelInfoDictContainer, options);
        }

        public global::STTypeWrapper Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __m_oLevelIDList__ = default(global::System.Collections.Generic.List<long>);
            var __m_oNumLevelInfosDictContainer__ = default(global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, int>>);
            var __m_oLevelInfoDictContainer__ = default(global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>>>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 51:
                        __m_oLevelIDList__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<long>>().Deserialize(ref reader, options);
                        break;
                    case 161:
                        __m_oNumLevelInfosDictContainer__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, int>>>().Deserialize(ref reader, options);
                        break;
                    case 162:
                        __m_oLevelInfoDictContainer__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, global::CLevelInfo>>>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::STTypeWrapper();
            ____result.m_oLevelIDList = __m_oLevelIDList__;
            ____result.m_oNumLevelInfosDictContainer = __m_oNumLevelInfosDictContainer__;
            ____result.m_oLevelInfoDictContainer = __m_oLevelInfoDictContainer__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.SampleEngineName
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class STEngineTypeWrapperFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::SampleEngineName.STEngineTypeWrapper>
    {

        public void Serialize(ref MessagePackWriter writer, global::SampleEngineName.STEngineTypeWrapper value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }

        public global::SampleEngineName.STEngineTypeWrapper Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::SampleEngineName.STEngineTypeWrapper();
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


#endif